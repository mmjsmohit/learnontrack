{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "swipe-button",
  "type": "registry:ui",
  "dependencies": [
    "clsx tailwind-merge",
    "canvas-confetti",
    "@types/canvas-confetti"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "registry/new-york-v4/ui/swipe-button.tsx",
      "content": "\"use client\"\n\nimport { CSSProperties, useEffect, useRef, useState } from \"react\"\nimport { Check, ChevronRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface SwipeButtonProps extends React.HTMLAttributes<HTMLDivElement> {\n  onSwipeComplete?: () => void\n  text?: string\n  className?: string\n  gap?: number\n  validationDuration?: number\n}\n\nexport function SwipeButton({\n  onSwipeComplete,\n  text = \"Swipe to validate\",\n  className,\n  gap = 3,\n  validationDuration = 2000,\n  ...props\n}: SwipeButtonProps) {\n  const [isSwiped, setIsSwiped] = useState(false)\n  const [isValidated, setIsValidated] = useState(false)\n  const [startX, setStartX] = useState(0)\n  const [currentX, setCurrentX] = useState(0)\n  const [isDragging, setIsDragging] = useState(false)\n  const containerRef = useRef<HTMLDivElement>(null)\n  const buttonRef = useRef<HTMLButtonElement>(null)\n\n  useEffect(() => {\n    if (isValidated) {\n      const timer = setTimeout(() => {\n        setIsValidated(false)\n        setIsSwiped(false)\n        setCurrentX(0)\n        setIsDragging(false)\n      }, validationDuration)\n      return () => clearTimeout(timer)\n    }\n  }, [isValidated, validationDuration])\n\n  const handleStart = (clientX: number) => {\n    if (isValidated) return\n    setStartX(clientX)\n    setIsDragging(true)\n  }\n\n  const handleMove = (clientX: number) => {\n    if (!buttonRef.current || !isDragging || isValidated) return\n\n    const containerWidth = containerRef.current?.offsetWidth || 0\n    const buttonWidth = buttonRef.current.offsetWidth\n    const maxSwipe = containerWidth - buttonWidth - gap * 2\n\n    let newX = clientX - startX\n    newX = Math.max(0, Math.min(newX, maxSwipe))\n\n    setCurrentX(newX)\n    setIsSwiped(newX >= maxSwipe - 10)\n  }\n\n  const handleEnd = () => {\n    if (isValidated) return\n\n    if (isSwiped) {\n      setIsValidated(true)\n      setCurrentX(0)\n      onSwipeComplete?.()\n    } else {\n      setCurrentX(0)\n      setIsSwiped(false)\n    }\n    setIsDragging(false)\n  }\n\n  return (\n    <div\n      ref={containerRef}\n      className={cn(\n        \"relative h-10 w-[250px] overflow-hidden rounded-lg\",\n        \"border border-neutral-200 bg-white shadow-sm dark:border-neutral-800 dark:bg-neutral-900\",\n        \"transition-colors duration-200\",\n        className\n      )}\n      onTouchStart={(e) => handleStart(e.touches[0].clientX)}\n      onTouchMove={(e) => handleMove(e.touches[0].clientX)}\n      onTouchEnd={handleEnd}\n      onMouseDown={(e) => handleStart(e.clientX)}\n      onMouseMove={(e) => handleMove(e.clientX)}\n      onMouseUp={handleEnd}\n      onMouseLeave={handleEnd}\n      role=\"button\"\n      aria-label=\"Swipe to validate\"\n      {...props}\n    >\n      <button\n        ref={buttonRef}\n        className={cn(\n          \"absolute rounded-md\",\n          \"bg-neutral-900 text-white dark:bg-white dark:text-neutral-900\",\n          \"flex items-center justify-center\",\n          \"cursor-grab active:cursor-grabbing\",\n          \"shadow-sm transition-all duration-300\",\n          \"hover:bg-neutral-800 dark:hover:bg-neutral-100\",\n          \"focus-visible:ring-2 focus-visible:ring-neutral-400 focus-visible:ring-offset-2 focus-visible:outline-none dark:focus-visible:ring-neutral-600 dark:focus-visible:ring-offset-neutral-900\",\n          \"disabled:pointer-events-none\",\n          isValidated &&\n            \"w-[calc(100%-6px)] cursor-default bg-emerald-500 opacity-100 hover:bg-emerald-500 dark:bg-emerald-500 dark:hover:bg-emerald-500\"\n        )}\n        style={{\n          width: isValidated ? `calc(100% - ${gap * 2}px)` : \"36px\",\n          height: `calc(100% - ${gap * 2}px)`,\n          left: isValidated ? `${gap}px` : `${gap}px`,\n          top: `${gap}px`,\n          transform: isValidated ? \"none\" : `translateX(${currentX}px)`,\n          transition: isDragging ? \"none\" : \"all 0.3s ease\",\n        }}\n        aria-label={isValidated ? \"Validated\" : \"Swipe to validate\"}\n        disabled={isValidated}\n      >\n        {isValidated ? (\n          <Check className=\"h-4 w-4\" aria-hidden=\"true\" />\n        ) : (\n          <ChevronRight className=\"h-4 w-4\" aria-hidden=\"true\" />\n        )}\n      </button>\n      <div className=\"flex h-full w-full items-center justify-center\">\n        <span\n          style={{ \"--swipe-button-text-width\": \"130px\" } as CSSProperties}\n          className={cn(\n            \"pointer-events-none mx-auto max-w-md text-sm text-neutral-600/70 dark:text-neutral-400/70\",\n            \"animate-swipe-button-text [background-size:var(--swipe-button-text-width)_100%] bg-clip-text [background-position:0_0] bg-no-repeat select-none [transition:background-position_1s_cubic-bezier(.4,0,.2,1)_infinite]\",\n            \"bg-gradient-to-r from-transparent via-black/80 via-50% to-transparent dark:via-white/80\"\n          )}\n        >\n          {text}\n        </span>\n      </div>\n    </div>\n  )\n}\n",
      "type": "registry:ui"
    }
  ]
}